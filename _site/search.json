[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 Visual Analytics & Applications",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics & Applications!\nIn this Webpage, I am going to share with you my learning journey in Visual Analytics.\nModule page: VISUAL ANALYTICS & APPLICATIONS\nInstructor: Prof Kam Tin Seong\n\n\n\nLesson\nTopic\nDate\nExercises covered\n\n\n\n\n1\nIntroduction to Visual Analytics\n15/4\nHands-on Ex1\nIn-class Ex1\n\n\n2\nDesigning Graphs to Enlighten\n29/4\n\n\n\n3\nInteractivity in Visual Analytics\n6/5\n\n\n\n4\nFundamentals of Visual Analytics\n13/5\n\n\n\n5\nVisual Multivariate Analysis\n20/5\n\n\n\n6\nIt’s About Time\n27/5\n\n\n\n7\nVisualising and Analysing Geographic Data\n3/6\n\n\n\n8\nNetwork Data Visualisation and Analysis\n10/6\n\n\n\n9\nInformation Dashboard Design\n17/6\n\n\n\n10\nVisual Analytics of Financial Data\n24/6"
  },
  {
    "objectID": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Ex1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, we will learn the basic principles and essential components of ggplot2. At the same time, we will gain hands-on experience in using these components to plot statistical graphics based on the principle of the Layered Grammar of Graphics."
  },
  {
    "objectID": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Ex1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.2 Getting started",
    "text": "1.2 Getting started\n\n1.2.1 Installing and loading the required libraries\n\npacman::p_load(tidyverse)\n\n\n\n1.2.2 Import Data\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\nskim( ) - skimr - to get an overview of a data frame with summarised statistics. For this usage, this function is used to identify missing values.\n\nskimr::skim(exam_data)\n\n\nData summary\n\n\nName\nexam_data\n\n\nNumber of rows\n322\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nID\n0\n1\n10\n10\n0\n322\n0\n\n\nCLASS\n0\n1\n2\n2\n0\n9\n0\n\n\nGENDER\n0\n1\n4\n6\n0\n2\n0\n\n\nRACE\n0\n1\n5\n7\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nENGLISH\n0\n1\n67.18\n14.69\n21\n59.00\n70\n78.00\n96\n▁▂▅▇▃\n\n\nMATHS\n0\n1\n69.33\n19.98\n9\n58.00\n74\n85.00\n99\n▁▂▃▇▇\n\n\nSCIENCE\n0\n1\n61.16\n18.18\n15\n49.25\n65\n74.75\n96\n▂▃▆▇▃"
  },
  {
    "objectID": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#results",
    "href": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#results",
    "title": "Hands-on Ex1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Results",
    "text": "Results\n\nR Graphics\nWe show a scatter plot in this section.\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\nggplot2\nWe show the data in this tab.\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#introducing-ggplot",
    "href": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#introducing-ggplot",
    "title": "Hands-on Ex1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3 Introducing ggplot",
    "text": "1.3 Introducing ggplot\nIt is an R package for declarative creating data-driven graphics based on The Grammar of Graphics. It is also part of the tidyverse family specially designed for visual exploration and communication.\n\nFor more detail, visit ggplot2 link.\n\n\n1.3.1 R Graphics vs ggplot\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\nWe show a histogram plot in this section.\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\nWe show the ggplot in this tab.\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#grammar-of-graphics",
    "href": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#grammar-of-graphics",
    "title": "Hands-on Ex1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.4 Grammar of Graphics",
    "text": "1.4 Grammar of Graphics\nBefore we getting started using ggplot2, it is important for us to understand the principles of Grammer of Graphics.\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\nWhat is a statistical graphic?\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\nData: The dataset being plotted. Aesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency. Geometrics: The visual elements used for our data, such as point, bar or line. Facets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots). Statistics, statiscal transformations that summarise data (e.g. mean, confidence intervals). Coordinate systems define the plane on which data are mapped on the graphic. Themes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Ex1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.5 Essential Grammatical Elements in ggplot2: data",
    "text": "1.5 Essential Grammatical Elements in ggplot2: data\ncall ggplot() function use below code chunk.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify()."
  },
  {
    "objectID": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on Ex1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label."
  },
  {
    "objectID": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Ex1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7 Essential Grammatical Elements in ggplot2: geom",
    "text": "1.7 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n1.7.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n1.7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\n`scale_y_continuous()` is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n1.7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nThe default bin is 30.\n\n\n1.7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n1.7.5 Modifying a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\n1.7.6 Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nkernel density estimatetwo kernel density linesfill with arguments\n\n\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot()\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n1.7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n1.7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n1.7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Ex1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8 Essential Grammatical Elements in ggplot2: stat",
    "text": "1.8 Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n1.8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n1.8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\n\n\n\n\n\n1.8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\n1.8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe default method used is loess.\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Ex1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9 Essential Grammatical Elements in ggplot2: Facets",
    "text": "1.9 Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n1.9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Ex1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "1.10 Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\n-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.\n-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a \"fixed\" aspect ratio (e.g. 1.78 for a \"widescreen\" plot).\n-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.\n\n1.10.1 Working with Coordinate\n\ndefault bar chartcoord_flip\n\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n1.10.2 Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Ex1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.11 Essential Grammatical Elements in ggplot2: themes",
    "text": "1.11 Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n1.11.1 Working with theme\n\ntheme_graytheme_classictheme_minimal\n\n\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#reference",
    "href": "Hands-on_Exercies/Hands-on_Ex1/Hands-on_Ex1.html#reference",
    "title": "Hands-on Ex1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.12 Reference",
    "text": "1.12 Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "In-class_Exercies/In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Exercies/In-class_Ex1/In-class_Ex1.html",
    "title": "In-class_Ex1",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nPlot a horizontal bar chart using theme().\nChanging the colors of plot panel background of theme_minimal() to light blue and the color of grid lines to white.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme(panel.background = element_rect(fill = \"lightblue\"),\n        panel.grid.major = element_line(color = \"white\"))\n\n\n\n\n\n\n\nThe original design, A simple vertical bar chart for frequency analysis. Critics:\ny-aixs label is not clear (i.e. count) To support effective comparison, the bars should be sorted by their resepctive frequencies. For static graph, frequency values should be added to provide addition information.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\nWith reference to the critics on the earlier paragraph, create a makeover looks similar to the figure at below.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-1) +\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\n\ngeom_text() adds text labels to the plot\nstat = \"count\" tells ggplot to calculate the count of each bar\naes(label = paste0(after_stat(count), \", \", round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")) maps the text label to a string that combines three pieces of information:\n\nafter_stat(count) calculates the count of each bar, after the stat = \"count\" argument has been applied to the data. This is equivalent to the ..count.. variable .\nround(after_stat(count)/sum(after_stat(count))*100, 1) calculates the percentage of each bar’s count relative to the total count, and rounds it to one decimal place. The sum(after_stat(count)) calculates the total count of all bars, after the stat = \"count\" argument has been applied to the data.\npaste0() combines the count and percentage values into a single string, separated by a comma and a space.\n\nvjust = -1 adjusts the vertical justification of the labels so that they appear above the top of each bar.\n\nMethod 2 This code chunk uses fct_infreq() of forcats package.\n\nexam_data %>%\n  mutate(RACE = fct_infreq(RACE)) %>%\n  ggplot(aes(x = RACE)) + \n  geom_bar()+\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100,\n            1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\n\n\n\nmutate(RACE = fct_infreq(RACE)) sorts the levels of the RACE variable in descending order of frequency. The fct_infreq() function from the forcats package is used to reorder the levels.\n\n\n\nThe original design\n\nMakeover design\n\nAdding mean and median lines on the histogram plot.\nChange fill color and line color\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(MATHS)), color=\"red\", \n             linetype=\"dashed\", size=0.85) +\n  geom_vline(aes(xintercept=median(MATHS)), color=\"black\", \n             linetype=\"dashed\", size=0.85)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\nThe original design\nThe histograms at below are elegantly designed but not informative. This is because they only reveal the distribution of English scores by gender but without context such as all pupils.\n\nggplot(data=exam_data, \n       aes(x= ENGLISH)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ GENDER)\n\n\n\n\nCreate a makeover looks similar to the figure below. The background histograms show the distribution of English scores for all pupils.\n\nd <- exam_data   \nd_bg <- d[, -3]  \n\nggplot(d, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = d_bg, fill = \"grey\", alpha = .5) +\n  geom_histogram(colour = \"black\") +\n  facet_wrap(~ GENDER) +\n  guides(fill = FALSE) +  \n  theme_bw()\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nThe code first creates a copy of the original dataset called d, and then creates another copy called d_bg by removing the third column (which corresponds to the RACE variable) using the [ , -3] syntax. This is done because we want to create a histogram of ENGLISH scores for all pupils (regardless of their race) as a background to the histograms of male and female pupils.\nTwo geom_histogram() layers are added: the first one with the data argument set to d_bg, which creates a background histogram of ENGLISH scores for all pupils with a fill color of “grey” and an alpha value of 0.5 to make it semi-transparent. The second geom_histogram() layer creates a histogram of ENGLISH scores for male and female pupils separately, with black borders and default fill colors. The facet_wrap() function is used to create separate histograms for male and female pupils. Finally, the guides() function is used to remove the fill legend, and theme_bw() is used to set a black-and-white theme for the plot."
  },
  {
    "objectID": "In-class_Exercies/In-class_Ex1/In-class_Ex1.html#getting-started",
    "href": "In-class_Exercies/In-class_Ex1/In-class_Ex1.html#getting-started",
    "title": "In-class_Ex1",
    "section": "1.2 Getting started",
    "text": "1.2 Getting started\n\n1.2.1 Installing and loading the required libraries"
  },
  {
    "objectID": "In-class_Exercies/In-class_Ex1/In-class_Ex1.html#designing-data-drive-graphics-for-analysis-iv",
    "href": "In-class_Exercies/In-class_Ex1/In-class_Ex1.html#designing-data-drive-graphics-for-analysis-iv",
    "title": "In-class_Ex1",
    "section": "7 Designing Data-drive Graphics for Analysis IV",
    "text": "7 Designing Data-drive Graphics for Analysis IV\nThe original design\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()             \n\n\n\n\nCreate a makeover that looks similar to the figure below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  xlim(0,100) +\n  ylim(0,100) +\n  geom_hline(yintercept=50, color=\"red\", \n             linetype=\"dashed\", size=0.85) +\n  geom_vline(xintercept=50, color=\"black\", \n             linetype=\"dashed\", size=0.85) +\n  geom_point() \n\n\n\n\nThe xlim() and ylim() functions are used to set the limits of the x and y axes to 0-100, respectively.\nThe geom_hline() and geom_vline() functions are used to add a horizontal dashed line at y=50 with a red color and a vertical dashed line at x=50 with a black color, both with a line type of “dashed” and a size of 0.85. These lines represent the median score for each subject, i.e. the score at which half of the pupils scored higher and half scored lower."
  }
]