---
title: "Take-home_Ex3"
editor: visual
author: "Han Shumin"
date: "2 Jun 2023"
date-modified: "`r Sys.Date()`"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
execute: 
  echo: true
  eval: true
  warning: false
---

# Overview

## The task

With reference to Mini-Challenge 3 of VAST Challenge 2023 and by using appropriate static and interactive statistical graphics methods, I will be revealing the:

-   Use visual analytics to identify anomalies in the business groups present in the knowledge graph.

## Methodology

**Network Analysis:** Conduct network analysis on the knowledge graph to extract relevant structural properties and characteristics. This can include measures such as centrality (e.g., degree, betweenness, closeness), community detection that provide insights into the connectivity and organization of the graph.

**Anomaly Detection:** Apply measures such as degree centrality in the network graph, as it counts how many edges each node has - the most degree central actor is the one with the most ties. For example, a Business Owner who owns only one business should be less suspicious than a Business Owner who owns more than three companies.

# Data Preparation

## Install and load the packages

The following code chunks will install and load the required packages.

```{r}
pacman::p_load(jsonlite, tidygraph, ggraph, 
               visNetwork, graphlayouts, ggforce, 
               skimr, tidytext, tidyverse, igraph, wordcloud, cluster, DT, plotly)


```

## Load the dataset in JSON format

In the code chunk below, from `JSON()` of jsonlite package is used to import `MC3.json` into R environment.

```{r}
MC3 <- fromJSON("data/MC3.json")
```

## Data Wrangling

### Extracting the nodes and links

The code chunk is used to extract nodes/edges data tables from MC3 list object and save the output in a tibble data frame object called `MC3_nodes` and `MC3_edges`.

```{r}
MC3_nodes <- as_tibble(MC3$nodes) %>%
  # distinct() %>%
  mutate(country = as.character(country),
         id = as.character(id),
         product_services = as.character(product_services),
         revenue_omu = as.numeric(as.character(revenue_omu)),
         type = as.character(type)) %>%
  select(id, country, type, revenue_omu, product_services)

glimpse(MC3_nodes)
```

-   `mutate()` and `as.character()` are used to convert the field data type from list to character.

-   To convert *revenue_omu* from list data type to numeric data type, we need to convert the values into character first by using `as.character()`. Then, `as.numeric()` will be used to convert them into numeric data type.

-   `select()` is used to re-organise the order of the fields.

```{r}
MC3_edges <- as_tibble(MC3$links) %>%
  distinct() %>%
  mutate(source = as.character(source),
         target = as.character(target),
         type = as.character(type)) %>%
  group_by(source, target, type) %>%
  summarise(weights = n()) %>%
  filter(source != target) %>%
  ungroup()

glimpse(MC3_edges)  
```

-   `distinct()` is used to ensure that there will be no duplicated records.

-   `mutate()` and `as.character()` are used to convert the field data type from list to character.

-   `group_by()` and `summarise()` are used to count the number of unique links.

-   the `filter(source!=target)` is to ensure that no record with similar source and target.

# Initial Data Exploration

## Exploring the edges data frame

In the code chunk below, [`skim()`](https://docs.ropensci.org/skimr/reference/skim.html) of [**skimr**](https://docs.ropensci.org/skimr/) package is used to display the summary statistics of *mc3_edges* tibble data frame.

```{r}
skim(MC3_edges)
```

The report above reveals that there is not missing values in all fields.

In the code chunk below, `datatable()` of DT package is used to display MC3_edges tibble dataframe as an interactive table on the html document.

```{r}
DT::datatable(MC3_edges)
```

```{r}
ggplot(data = MC3_edges,
       aes(x = type)) +
  geom_bar() +
  labs(title = "Visualise the type variable in Edges dataframe")  # Add the plot title
```

The above barplot shows the distribution of the type variable in the edge dataframe. From the two bars we can observe that in the *type* variable they are only two categories "Beneficial Owner", and "Company Contacts". Beneficial Owner formed the majority counts and is more than double of the Company Contacts.

In the Datatable of the Edge dataframe, we are able to identify the *source* variable contains company names, while the *target* variable contains the persons' names. Therefore we can conclude that the *type* variable used to identify whether a person in the target variable belongs to the Beneficial Owner or Company Contacts.

## Initial Network Visualisation and Analysis

### Building network model with tidygraph

```{r}
id1 <- MC3_edges %>%
  select(source) %>%
  rename(id = source)

id2 <- MC3_edges %>%
  select(id = target)

MC3_nodes1 <- rbind(id1, id2) %>%
  distinct() %>%
  left_join(MC3_nodes, unmatched = "drop")
```

```{r}
MC3_graph <- tbl_graph(nodes = MC3_nodes1,
                       edges = MC3_edges,
                       directed = FALSE) %>%
  mutate(betweenness_centrality = centrality_betweenness())

MC3_graph %>%
  filter(betweenness_centrality >= 100000) %>%
ggraph(layout = "fr") +
  geom_edge_link(aes(alpha=0.5)) +
  geom_node_point(aes(
    size = betweenness_centrality,
    color = country, alpha = 0.5), show.legend = TRUE) +
  scale_size_continuous(range=c(1,10))+
  labs(title = "Initial Network Visualisation") +  # Add the plot title
  theme_graph()
```

From above network graph, even though we have applied the betweenness_centrality, Country as the size and color of the nodes, we only able to see nodes in the center area tend to have more links with other nodes nearby, those nodes that located near the boundaries are have less link or only one link. Other than that there are not much insights could be seen from the graph.

## **Exploring the nodes data frame**

In the code chunk below, [`skim()`](https://docs.ropensci.org/skimr/reference/skim.html) of [**skimr**](https://docs.ropensci.org/skimr/) package is used to display the summary statistics of *MC3_nodes* tibble data frame.

```{r}
skim(MC3_nodes)
```

The report above reveals that there is no missing values in all fields.

In the code chunk below, `datatable()` of DT package is used to display mc3_nodes tibble data frame as an interactive table on the html document.

```{r}
DT::datatable(MC3_nodes)
```

```{r}
ggplot(data = MC3_nodes,
       aes(x = type)) +
  geom_bar() +
  labs(title = "Visualise the type variable in Nodes dataframe")  # Add the plot title
```

The above barplot shows the distribution of the type variable in the node dataframe. From the above three bars we can observe that in the *type* variable they have three categories which are "Beneficial Owner", "Company", and "Company Contacts". The *type* variable used to identify the id belongs to which categories.

## Text Sensing with tidytext

In this section, you will learn how to perform basic text sensing using appropriate functions of [**tidytext**](https://juliasilge.github.io/tidytext/) package.

### Simple word count

The code chunk below calculates number of times the word *fish* appeared in the field *product_services*.

```{r}
MC3_nodes %>%
  mutate(n_fish = str_count(product_services, "fish"))
```

```{r}
MC3_nodes %>%
  mutate(n_seafood = str_count(product_services, "seafood"))
```

### **Tokenisation**

The word tokenisation have different meaning in different scientific domains. In text sensing, **tokenisation** is the process of breaking up a given text into units called **tokens**. Tokens can be individual words, phrases or even whole sentences. In the process of tokenisation, some characters like punctuation marks may be discarded. The tokens usually become the input for the processes like parsing and text mining.

In the code chunk below, [`unnest_token()`](https://juliasilge.github.io/tidytext/reference/unnest_tokens.html) of tidytext is used to split text in *product_services* field into words.

```{r}
token_nodes <- MC3_nodes %>%
  unnest_tokens(word, product_services)
```

The two basic arguments to `unnest_tokens()` used here are column names. First we have the output column name that will be created as the text is unnested into it (*word*, in this case), and then the input column that the text comes from (*product_services*, in this case).

::: callout-note
-   By default, punctuation has been stripped. (Use the *to_lower = FALSE* argument to turn off this behavior).

-   By default, `unnest_tokens()` converts the tokens to lowercase, which makes them easier to compare or combine with other datasets. (Use the *to_lower = FALSE* argument to turn off this behavior).
:::

Now we can visualise the words extracted by using the code chunk below.

```{r}
token_nodes %>%
  count(word, sort = TRUE) %>%
  top_n(15) %>%
  mutate(word = reorder(word, n)) %>%
  ggplot(aes(x = word, y=n)) +
  geom_col() +
  xlab(NULL) +
  coord_flip() +
    labs(x = "Count",
         y = "Unique words",
         title = "Count of unique words found in product_services field")
  
```

The bar chart reveals that the unique words contains some words that may not be useful to use. For instance "a" and "to". In the word of text mining we call those words **stop words**. You want to remove these words from your analysis as they are fillers used to compose a sentence.

### **Removing stopwords**

The tidytext package has a function called [`stop_words`](https://juliasilge.github.io/tidytext/reference/stop_words.html) that will help us clean up stop words.

```{r}
stopwords_removed <- token_nodes %>%
  anti_join(stop_words)
```

::: callout-note
-   Load the stop_words data included with tidytext. This data is simply a list of words that you may want to remove in a natural language analysis.

-   Then `anti_join()` of dplyr package is used to remove all stop words from the analysis.
:::

We can visualise the words extracted again.

```{r}
stopwords_removed %>%
  count(word, sort = TRUE) %>%
  top_n(15) %>%
  mutate(word = reorder(word, n)) %>%
  ggplot(aes(x = word, y=n)) +
  geom_col() +
  xlab(NULL) +
  coord_flip() +
    labs(x = "Count",
         y = "Unique words",
         title = "Count of unique words found in product_services field (removed stopwords)")
```

### Visulize top 10 keywords by WordCloud (exclude 0, unknown and character)

```{r}

df_wordcloud <- stopwords_removed

# Count the frequency of each word
word_frequency <- df_wordcloud %>%
  group_by(word) %>%
  filter(!word %in% c("character", "0", "unknown")) %>%
  summarise(freq = n()) %>%
  arrange(desc(freq))

# Create a word cloud
set.seed(1234)  # for reproducibility of random colors
wordcloud(words = word_frequency$word, freq = word_frequency$freq, min.freq = 10
          ,
          max.words=200, random.order=FALSE, rot.per=0.35, 
          colors=brewer.pal(9, "Dark2"))

```

In Top 10 keywords which may related to fish could be, "fish", "seafood", "frozen", "food", "fresh", "salmon. We will use these keywords to filter some nodes in order to visulize the relationships of the nodes in the network graph.

### Network visulazation

```{r}
df <- stopwords_removed

# Filter the data frame
df_extracted <- df %>%
  filter(str_detect(word, pattern = "fish") | str_detect(word, pattern = "seafood") |
           str_detect(word, pattern = "frozen") | str_detect(word, pattern = "food") |
           str_detect(word, pattern = "fresh") | str_detect(word, pattern = "salmon"))

# Remove duplicate IDs
nodes_extracted_distinct <- df_extracted %>%
  distinct(id, country, type, revenue_omu) %>%
  drop_na(revenue_omu)

# Network visualisation for fish and seafood related companies 

id3 <- MC3_edges %>%
  select(source) %>%
  rename(id = source)

id4 <- MC3_edges %>%
  select(id = target)

MC3_nodes_extracted <- rbind(id3, id4) %>%
  distinct() %>%
  left_join(nodes_extracted_distinct, unmatched = "drop")
  

MC3_graph_extracted <- tbl_graph(nodes = MC3_nodes_extracted,
                       edges = MC3_edges,
                       directed = FALSE) %>%
  mutate(betweenness_centrality = centrality_betweenness()) %>%
  filter(betweenness_centrality >= 100000)

         
# Calculate the degrees of each node
degrees <- degree(MC3_graph_extracted)
set.seed (1234)

MC3_graph_extracted %>%
  activate(nodes) %>%
  mutate(community = as.factor(membership(cluster_louvain(MC3_graph_extracted)))) %>%
  ggraph(layout = "fr") +
  geom_edge_link(aes(alpha = 0.5)) +
  geom_node_point(aes(size = betweenness_centrality,
                      color = community,  # Use the community variable for color
                      alpha = 0.5), show.legend = TRUE) +
  geom_node_text(aes(label = ifelse(degrees > 3, as.character(id), "")), size = 2) +  # Add node labels
  scale_size_continuous(range = c(1, 10)) +
  labs(title = "Network Visualization with Betweenness centrality \nabove 10000 and degree above 3") +  # Add the plot title
  theme_graph()
```

In above network graph, I had to use a filter to exclude betweenness_centrality score which are less than 100000 in order to reduce the amount of nodes to be displayed in the graph. Here, the nodes with more than 3 link will be shown with label name. There is a fun fact that company owners which shown labels in the graph actually belongs to different communities, although they are running not only one company, but they don't have business relationships between clusters.

### Community Detection

Utilize the groups created by community cluster detection, display top 10 communities in datatable format so we are able to see the detail.

```{r}
set.seed (1234)
MC3_graph_extracted$community <- as.factor(membership(cluster_louvain(MC3_graph_extracted)))

# Calculate community sizes
community_sizes <- table(MC3_graph_extracted$community)

# Sort community sizes in descending order
sorted_sizes <- sort(community_sizes, decreasing = TRUE)

sorted_community <- names(sorted_sizes)[1:23]

nodes_cluster <- data.frame(id = V(MC3_graph_extracted)$id)
nodes_cluster$product_services <- MC3_nodes1$product_services[match(nodes_cluster$id, MC3_nodes1$id)]
nodes_cluster$country <- MC3_nodes1$country[match(nodes_cluster$id, MC3_nodes1$id)]
nodes_cluster$type <- MC3_nodes1$type[match(nodes_cluster$id, MC3_nodes1$id)]
nodes_cluster$revenue_omu <- MC3_nodes1$revenue_omu[match(nodes_cluster$id, MC3_nodes1$id)]
```

::: panel-tabset
### Community 1

```{r}
community1 <- sorted_community[1]
nodes <- V(MC3_graph_extracted)$id[MC3_graph_extracted$community == community1]
community_services1 <- nodes_cluster[nodes_cluster$id %in% nodes, c("id", "country", "type", "revenue_omu", "product_services")]

datatable(community_services1)
```

### Community 2

```{r}
community2 <- sorted_community[2]
nodes <- V(MC3_graph_extracted)$id[MC3_graph_extracted$community == community2]
community_services2 <- nodes_cluster[nodes_cluster$id %in% nodes, c("id", "country", "type", "revenue_omu", "product_services")]

datatable(community_services2)
```

### Community 3

```{r}
community3 <- sorted_community[3]
nodes <- V(MC3_graph_extracted)$id[MC3_graph_extracted$community == community3]
community_services3 <- nodes_cluster[nodes_cluster$id %in% nodes, c("id", "country", "type", "revenue_omu", "product_services")]

datatable(community_services3)
```

### Community 4

```{r}
community4 <- sorted_community[4]
nodes <- V(MC3_graph_extracted)$id[MC3_graph_extracted$community == community4]
community_services4 <- nodes_cluster[nodes_cluster$id %in% nodes, c("id", "country", "type", "revenue_omu", "product_services")]

datatable(community_services4)
```

### Community 5

```{r}
community5 <- sorted_community[5]
nodes <- V(MC3_graph_extracted)$id[MC3_graph_extracted$community == community5]
community_services5 <- nodes_cluster[nodes_cluster$id %in% nodes, c("id", "country", "type", "revenue_omu", "product_services")]

datatable(community_services5)
```

### Community 6

```{r}
community6 <- sorted_community[6]
nodes <- V(MC3_graph_extracted)$id[MC3_graph_extracted$community == community6]
community_services6 <- nodes_cluster[nodes_cluster$id %in% nodes, c("id", "country", "type", "revenue_omu", "product_services")]

datatable(community_services6)
```

### Community 7

```{r}
community7 <- sorted_community[7]
nodes <- V(MC3_graph_extracted)$id[MC3_graph_extracted$community == community7]
community_services7 <- nodes_cluster[nodes_cluster$id %in% nodes, c("id", "country", "type", "revenue_omu", "product_services")]

datatable(community_services7)
```

### Community 8

```{r}
community8 <- sorted_community[8]
nodes <- V(MC3_graph_extracted)$id[MC3_graph_extracted$community == community8]
community_services8 <- nodes_cluster[nodes_cluster$id %in% nodes, c("id", "country", "type", "revenue_omu", "product_services")]

datatable(community_services8)
```

### Community 9

```{r}
community9 <- sorted_community[9]
nodes <- V(MC3_graph_extracted)$id[MC3_graph_extracted$community == community9]
community_services9 <- nodes_cluster[nodes_cluster$id %in% nodes, c("id", "country", "type", "revenue_omu", "product_services")]

datatable(community_services9)
```

### Community 10

```{r}
community10 <- sorted_community[10]
nodes <- V(MC3_graph_extracted)$id[MC3_graph_extracted$community == community10]
community_services10 <- nodes_cluster[nodes_cluster$id %in% nodes, c("id", "country", "type", "revenue_omu", "product_services")]

datatable(community_services10)
```
:::

Due to page limit, we will only display the top 10 largest clusters. From the network graph we had known in each cluster there are companies and company owners, those displayed with labels are considered to have higher numbers of interactions with other companies or owners who owned more than one company. These companies and owners are more suspicious than others.

# Box-plot of revenue_omu in each cluster

::: panel-tabset
### Community_1

```{r}
# Create a boxplot of revenue_omu
p1 <- plot_ly(data = community_services1, type = "box", y = ~revenue_omu) %>%
  layout(title = "Boxplot of revenue_omu", yaxis = list(title = "Revenue (omu)"))

# Identify and label the outliers
outliers <- boxplot.stats(community_services1$revenue_omu)$out
outliers_label <- community_services1$id[community_services1$revenue_omu %in% outliers]

# Calculate the mean
mean_value <- mean(community_services1$revenue_omu)

# Add annotations for the outliers with tooltips displaying the mean
annotations <- lapply(seq_along(outliers), function(i) {
  list(
    x = 1,
    y = outliers[i],
    text = paste("Mean:", mean_value),
    showarrow = FALSE,
    hoverinfo = "text"
  )
})

# Add the annotations to the plot
p1 <- p1 %>% layout(annotations = annotations)

p1
```

### Community_2

```{r}
# Create a boxplot of revenue_omu
p2 <- plot_ly(data = community_services2, type = "box", y = ~revenue_omu) %>%
  layout(title = "Boxplot of revenue_omu", yaxis = list(title = "Revenue (omu)"))

# Identify and label the outliers
outliers <- boxplot.stats(community_services2$revenue_omu)$out
outliers_label <- community_services2$id[community_services2$revenue_omu %in% outliers]

# Calculate the mean
mean_value <- mean(community_services2$revenue_omu)

# Add annotations for the outliers with tooltips displaying the mean
annotations <- lapply(seq_along(outliers), function(i) {
  list(
    x = 1,
    y = outliers[i],
    text = paste("Mean:", mean_value),
    showarrow = FALSE,
    hoverinfo = "text"
  )
})

# Add the annotations to the plot
p2 <- p2 %>% layout(annotations = annotations)

p2
```

### Community_3

```{r}
# Create a boxplot of revenue_omu
p3 <- plot_ly(data = community_services3, type = "box", y = ~revenue_omu) %>%
  layout(title = "Boxplot of revenue_omu", yaxis = list(title = "Revenue (omu)"))

# Identify and label the outliers
outliers <- boxplot.stats(community_services3$revenue_omu)$out
outliers_label <- community_services3$id[community_services3$revenue_omu %in% outliers]

# Calculate the mean
mean_value <- mean(community_services3$revenue_omu)

# Add annotations for the outliers with tooltips displaying the mean
annotations <- lapply(seq_along(outliers), function(i) {
  list(
    x = 1,
    y = outliers[i],
    text = paste("Mean:", mean_value),
    showarrow = FALSE,
    hoverinfo = "text"
  )
})

# Add the annotations to the plot
p3 <- p3 %>% layout(annotations = annotations)

p3
```

### Community_4

```{r}
# Create a boxplot of revenue_omu
p4 <- plot_ly(data = community_services4, type = "box", y = ~revenue_omu) %>%
  layout(title = "Boxplot of revenue_omu", yaxis = list(title = "Revenue (omu)"))

# Identify and label the outliers
outliers <- boxplot.stats(community_services4$revenue_omu)$out
outliers_label <- community_services4$id[community_services4$revenue_omu %in% outliers]

# Calculate the mean
mean_value <- mean(community_services4$revenue_omu)

# Add annotations for the outliers with tooltips displaying the mean
annotations <- lapply(seq_along(outliers), function(i) {
  list(
    x = 1,
    y = outliers[i],
    text = paste("Mean:", mean_value),
    showarrow = FALSE,
    hoverinfo = "text"
  )
})

# Add the annotations to the plot
p4 <- p4 %>% layout(annotations = annotations)

p4
```

### Community_5

```{r}
# Create a boxplot of revenue_omu
p5 <- plot_ly(data = community_services5, type = "box", y = ~revenue_omu) %>%
  layout(title = "Boxplot of revenue_omu", yaxis = list(title = "Revenue (omu)"))

# Identify and label the outliers
outliers <- boxplot.stats(community_services5$revenue_omu)$out
outliers_label <- community_services5$id[community_services5$revenue_omu %in% outliers]

# Calculate the mean
mean_value <- mean(community_services5$revenue_omu)

# Add annotations for the outliers with tooltips displaying the mean
annotations <- lapply(seq_along(outliers), function(i) {
  list(
    x = 1,
    y = outliers[i],
    text = paste("Mean:", mean_value),
    showarrow = FALSE,
    hoverinfo = "text"
  )
})

# Add the annotations to the plot
p5 <- p5 %>% layout(annotations = annotations)

p5
```

### Community_6

```{r}
# Create a boxplot of revenue_omu
p6 <- plot_ly(data = community_services6, type = "box", y = ~revenue_omu) %>%
  layout(title = "Boxplot of revenue_omu", yaxis = list(title = "Revenue (omu)"))

# Identify and label the outliers
outliers <- boxplot.stats(community_services6$revenue_omu)$out
outliers_label <- community_services6$id[community_services6$revenue_omu %in% outliers]

# Calculate the mean
mean_value <- mean(community_services6$revenue_omu)

# Add annotations for the outliers with tooltips displaying the mean
annotations <- lapply(seq_along(outliers), function(i) {
  list(
    x = 1,
    y = outliers[i],
    text = paste("Mean:", mean_value),
    showarrow = FALSE,
    hoverinfo = "text"
  )
})

# Add the annotations to the plot
p6 <- p6 %>% layout(annotations = annotations)

p6
```

### Community_7

```{r}
# Create a boxplot of revenue_omu
p7 <- plot_ly(data = community_services7, type = "box", y = ~revenue_omu) %>%
  layout(title = "Boxplot of revenue_omu", yaxis = list(title = "Revenue (omu)"))

# Identify and label the outliers
outliers <- boxplot.stats(community_services7$revenue_omu)$out
outliers_label <- community_services7$id[community_services7$revenue_omu %in% outliers]

# Calculate the mean
mean_value <- mean(community_services7$revenue_omu)

# Add annotations for the outliers with tooltips displaying the mean
annotations <- lapply(seq_along(outliers), function(i) {
  list(
    x = 1,
    y = outliers[i],
    text = paste("Mean:", mean_value),
    showarrow = FALSE,
    hoverinfo = "text"
  )
})

# Add the annotations to the plot
p7 <- p7 %>% layout(annotations = annotations)

p7
```

### Community_8

```{r}
# Create a boxplot of revenue_omu
p8 <- plot_ly(data = community_services8, type = "box", y = ~revenue_omu) %>%
  layout(title = "Boxplot of revenue_omu", yaxis = list(title = "Revenue (omu)"))

# Identify and label the outliers
outliers <- boxplot.stats(community_services8$revenue_omu)$out
outliers_label <- community_services8$id[community_services8$revenue_omu %in% outliers]

# Calculate the mean
mean_value <- mean(community_services8$revenue_omu)

# Add annotations for the outliers with tooltips displaying the mean
annotations <- lapply(seq_along(outliers), function(i) {
  list(
    x = 1,
    y = outliers[i],
    text = paste("Mean:", mean_value),
    showarrow = FALSE,
    hoverinfo = "text"
  )
})

# Add the annotations to the plot
p8 <- p8 %>% layout(annotations = annotations)

p8
```

### Community_9

```{r}
# Create a boxplot of revenue_omu
p9 <- plot_ly(data = community_services9, type = "box", y = ~revenue_omu) %>%
  layout(title = "Boxplot of revenue_omu", yaxis = list(title = "Revenue (omu)"))

# Identify and label the outliers
outliers <- boxplot.stats(community_services9$revenue_omu)$out
outliers_label <- community_services9$id[community_services9$revenue_omu %in% outliers]

# Calculate the mean
mean_value <- mean(community_services9$revenue_omu)

# Add annotations for the outliers with tooltips displaying the mean
annotations <- lapply(seq_along(outliers), function(i) {
  list(
    x = 1,
    y = outliers[i],
    text = paste("Mean:", mean_value),
    showarrow = FALSE,
    hoverinfo = "text"
  )
})

# Add the annotations to the plot
p9 <- p9 %>% layout(annotations = annotations)

p9
```

### Community_10

```{r}
# Create a boxplot of revenue_omu
p10 <- plot_ly(data = community_services10, type = "box", y = ~revenue_omu) %>%
  layout(title = "Boxplot of revenue_omu", yaxis = list(title = "Revenue (omu)"))

# Identify and label the outliers
outliers <- boxplot.stats(community_services10$revenue_omu)$out
outliers_label <- community_services10$id[community_services10$revenue_omu %in% outliers]

# Calculate the mean
mean_value <- mean(community_services10$revenue_omu)

# Add annotations for the outliers with tooltips displaying the mean
annotations <- lapply(seq_along(outliers), function(i) {
  list(
    x = 1,
    y = outliers[i],
    text = paste("Mean:", mean_value),
    showarrow = FALSE,
    hoverinfo = "text"
  )
})

# Add the annotations to the plot
p10 <- p10 %>% layout(annotations = annotations)

p10
```
:::

From above Boxplot in each cluster, we noticed cluster 2, 3, 4, 5, 6, 7, 8, 9 all have outliers in Revenue_omu. We should watch out these companies since their revenues are unusually higher than other companies within the same cluster.
